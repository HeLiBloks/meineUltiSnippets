# vim:set ft=snippets foldmarker=snippet,endsnippet foldlevel=1 foldenable foldmethod=marker:
priority -51

extends sh

snippet IFS "change input file separator" b
oIFS="$IFS"; IFS=$'${1:\n}'
endsnippet

snippet "sed" "a\append i\before1 c\replaceFirstline" b
sed '/${1:[[:alnum:]]}/a \
	${2:toappend}'
endsnippet

snippet "sed -n '#pa#,#pa2#p'" "print between 2 patterns"
sed -nr '#${1:<([[:alpha:]]+>)}#,#${2:</\1}/p' ./$0
endsnippet

snippet "sed 'd//'" "Delete string" b
sed -r 'd/${1:[0-9]}/' $0
endsnippet

snippet "sed 's///g'" "Replace w. String" b
sed -r 's/${1:[0-9a-zA-Z]}/${2:(\1)}/g' $0
endsnippet

snippet for "for item in ((ls))" b
for i in $( ${1:ls} ); do
	echo "item: $i"
done
	$0
endsnippet

snippet ifRegex "if regex" b
if [[ ${1:$string} =~ ${2:[a-zA-Z0-9]+} ]]; then
		${3:echo "match in string"}
	else
		#regex not matched
		${4:echo "no match in string"}
fi
$0
endsnippet

snippet whileRead "while read line" b
while read -r line ;do
	${2:echo "$line"}
done < ${1:file}
endsnippet

snippet whileCount "while count" b
count=0
while [ $i -le ${1:10} ]; do
	${echo $i}
	((i+=1))
done
$0
endsnippet

snippet cat "cat > heredocument << EOF" !b
cat > ./${1:document} << EOF
${2:[catThisIntoFile]}
EOF
$0
endsnippet

# pythonInterpolatedArray snippet
global !p
def complete(t, opts):
	if t:
		opts = [ m[len(t):] for m in opts if m.startswith(t)]
	if len(opts)==1:
		return opts[0]
	return "("+'|'.join(opts)+ ')'
endglobal

snippet st "Status" b
status
$0
#status $1`!p snip.rv=complete(t[1], ['new','incomplete','invalid'])`
endsnippet

# endsnippet

snippet ifBrackets "if expressionList" b
if ${1:[doing]} do;

done
$0
endsnippet

snippet if[-f] "-f file -d dir" b
if [ ${1:! -f\-d} ]; then
${2:mkdir }
fi
$0
endsnippet

snippet rename "rename files" b
rename ${1:-e} ${2:'y}/${3:[A-Z]}/${4:[a-z]}/' ${5:*.*}
$0
endsnippet

snippet column "-tx table -s delim" b
column -tx -s'${1:delim}'$0
endsnippet

snippet cut "cut -f field -d delim" b
cut ${1:-f1,2} ${2:-d,}$0
endsnippet

snippet "find exec" "find and exec command on files" b
find . -maxdepth 0 -empty -exec echo {} is empty. \;
endsnippet

snippet "declare -A" "Associative array[key]=value" b
${1:arrayname}[${2:key}]=${3:value}
endsnippet

snippet "varl" "string|array length" b
\$\{#${1:var[*]}\}$0
endsnippet

snippet "vars" "substitute pattern" b
\$\{${1:variable}/${2:stringToReplace}/${3:pattern}/\}$0
endsnippet


snippet "varsf" "substitute first pattern" b
\$\{${1:variable}//${2:stringToReplace}/${3:pattern}/\}$0
endsnippet

snippet "vart" "string|array trim w expand" b
\$\{${1:variable[*]}##${2:stringToTrim*}\}$0
endsnippet

snippet "varc" "string|array fixedTrim" b
\$\{${1:variable[*]}%${2:stringToTrim}\}$0
endsnippet

snippet "unset " "delete array member[n]" b
unset ${1:array}${2:[}
endsnippet

snippet "xargs -I '{}'" "-n nrWords -d delim, pipe placeholder '{}'" b
xargs -I '{}' $0
endsnippet

snippet printf "print %s string %b binary" b
printf '%s ${2:text}\n' "\$${1:var}"
endsnippet

snippet join "-t delim -1 field_file1 -2 field_file2 file1 2" b
join -t'${1:delim}' ./${2:file1} ./${3:file2} -1 ${4:field of $3} ${5:field of $4} $0
endsnippet

snippet comm "-12 print only lines in file1&2 both 3"
comm ${1:--output-delimiter=} ./${2:file1} ./${3:file2}
endsnippet

snippet paste "-d delim -s file ,'-' for each column in outFile" b
paste -d'${1:,}' -s./${2:file} ${3:- - -}
endsnippet

snippet wc "-w wordCount -l lines -m chars -c bytes" b
wc -w $0
endsnippet

snippet dot "-T format -O baseName+format" b
dot -T${1:pdf|jpg} -O${2:inputfile.dot}
endsnippet

# [ -a FILE ] # [ -b FILE ] # [ -c FILE ] # [ -d FILE ] # [ -e FILE ] # [ -f FILE ] # [ -g FILE ] # [ -h FILE ] # [ -k FILE ] # [ -p FILE ] # [ -r FILE ] # [ -s FILE ] # [ -t FD ]  # [ -u FILE ] # [ -w FILE ] # [ -x FILE ] # [ -O FILE ] # [ -G FILE ] # [ -L FILE ] # [ -N FILE ] # [ -S FILE ] # [ -D DIR  ]

# vim: set et ts=4 sw=4 tw=0 foldenable foldmethod=syntax foldclose=all:
priority 1

snippet Plug "Plugin from git" b
Plug '${1:`xclip -o 2>/dev/null | grep -Po  '((https?)|(git))[:][/].+\/\K\w+\/\w+$'`}'
$0
endsnippet

snippet funcDict! "function dictionary" b
funcd ${1:functionName}(${2:param}) ${3:dict|abort}
    let a:${4:$2}
    return '${5:$2}'
endfunction $1
$0
endsnippet

snippet funcProto "function dict prototype" b
func! ${1:`!v expand('%:t:r')`}#prototype()
    let prototype = {
        \ '$1':function('`!v split(getline(search('^\s*func!\?\(tion\)\?\s\+.*','bn',line('0'))))[1][:-3]`'),}
    return prototype
endfunc
endsnippet

snippet dict "dict declaration" b
let ${1:g:dictName} = {
    \ "${2:key}": ""${3:string|funcref}",
    \ "key": "value", }
endsnippet

snippet split() "split string" b
split(getline('.'),${1:str} )
endsnippet

snippet functionP "define python function" b
function! ${1:VimEntranceFunc}(...)
    let l:linestart = a:0>0 ? a:1 : 1           "init to 1 if empty
    let l:lineend   = a:0>1 ? a:2 : line('$')   "init to lastLineNr if  empty

python3 << endPython
#!/bin/python
import ${2:vim|neovim}
firstFuncArg=$2.eval("a:1")

endPython

endfunction
${2:command! $1 :call $1()}
${3:inoremap <F5> <C-R>=$1()<CR>}

endsnippet

snippet command "command args" b
command! -nargs=${1:0|1|?|+} -complete=custom,${2:customfunc()} ${4:cmdname} call ${3:function}(${4:<q-args>})
endsnippet

snippet section "section autocmdgrp folds" b
" ${1:filetype} `!v get(split(&foldmarker,','),0)`"

augroup filetype_$1
    autocmd filetype $1 setlocal lazyredraw
    autocmd filetype $1 
augroup end

" `!v get(split(&foldmarker,','),1)`"
endsnippet

snippet redir "redirection [=>|=>>|>|=>] [{var}|{file}|@{a-Z}]" b
redir ${1:=>|=>>|>|=>} ${2:var|file|@a-Z}
    silent ${3:command}
end
endsnippet

# snippet get "get(g:,{var},{default})" "re.match('\s+[bwglsav]:[a-zA-Z0-9#_]*', snip.buffer[snip.line])" be
snippet /(let\s*[bwglsav]:[a-zA-Z0-9#_]*\s*=\s*)get?/ "get(g:,{var},{default})" r
`!p snip.rv=match.group(1)`get(${1:g:},'${2:`!v matchstr(getline('.'),'\<[bwglsav]:\h[a-zA-Z0-9#_]*\>')`}', '${3:\{\}}')$0
endsnippet

snippet /(([=[]\s*)(.+,)*){/ "dict instance" r
`!p snip.rv=match.group(1)`{ '${2:key}': '${3:string|funcref}' }
endsnippet

snippet /(return\s|(let\s*[bwglsav]?:?[a-zA-Z0-9#_]*\s*=)\s*)/ "conditional expression ? true : false" r
`!p snip.rv=match.group(1)`${1:expression} ? ${2:true} : ${3:false}
endsnippet


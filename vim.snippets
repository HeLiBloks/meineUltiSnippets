# vim: set ts=4 sw=4 tw=0 foldenable foldmethod=syntax
snippet Bundle "Plugin from git" b
Bundle '${1:~/.vim/bundle/}'
$0
endsnippet

snippet funcDict! "function dictionary" b
function! ${1:functionName}(${2:param}) ${3:dict}
    let a:${4:$2}
    return '${5:$2}'
endfunction $1
$0
endsnippet

snippet func! "function definition" b
function! ${1:functionName}(${2:param})
    let a:${4:$2}
    return '${5:$2}'
endfunc $1
$0
endsnippet

snippet funcProto "function dict prototype" b
func! ${1:`!v expand('%:t:r')`}#prototype()
    let prototype = {
        \ '$1':function('`!v split(getline(search('^\s*func!\?\(tion\)\?\s\+.*','bn',line('0'))))[1][:-3]`'),}
    return prototype
endfunc
endsnippet

snippet dict "dictionary" b
let ${1:dictName} = {
    \ "${2:key}": ""${3:value}",
    \ "banana": "yellow"
}
endsnippet

snippet split() "split string" b
split(getline('.'))
endsnippet

snippet functionP "define python function" b
function! ${1:VimEntranceFunc}(...)

@begin=python@
python << endPython

import ${2:neovim|vim}
firstFuncArg=vim.eval("a:0")
endPython
@end=python@
endfunction
${2:command! $1 cmd call $1()}
${3:inoremap <F5> <C-R>=$1()<CR>}

endsnippet

snippet command "command args" b
command! -nargs=${1:0|?|+} -complete=${2:itemtocomplete} ${4:cmdname} call ${3:function}(${4:<q-args>})
endsnippet

snippet section "section autocmdgrp folds" b
" ${1:filetype}   { "

augroup filetype_$1
    autocmd filetype $1 setlocal lazyredraw
    autocmd filetype $1 nmap <buffer> <C-]> o
    autocmd filetype $1 nmap <silent><buffer> <C-w><C-]><C-w> O
    autocmd filetype $1 nmap <buffer>f <leader><leader>f
augroup end

" }  "
endsnippet
